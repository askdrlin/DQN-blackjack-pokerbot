import numpy as np

'''reference: MorvanZhou's github'''
'''link: https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/5.2_Prioritized_Replay_DQN/RL_brain.py'''

class SumTree:
    data_pointer = 0

    def __init__(self, capacity):
        self.capacity = capacity
        self.tree = np.zeros(self.capacity * 2 - 1)
        # make sure self.data can store arrays
        self.data = np.zeros(self.capacity, dtype=object)

    def add(self, p, data):
        tree_idx = self.data_pointer + self.capacity - 1
        self.data[self.data_pointer] = data
        self.update(tree_idx, p)
        self.data_pointer += 1
        if self.data_pointer >= self.capacity:
            self.data_pointer = 0

    def update(self, tree_idx, p):
        # change is created to update the parent node
        change = p - self.tree[tree_idx]
        # while the leaf can be updated by simply replacing it
        self.tree[tree_idx] = p
        # write a while loop to add up parent nodes
        while tree_idx != 0:
            tree_idx = (tree_idx - 1) // 2
            self.tree[tree_idx] += change

    def find_leaves(self, v):
        parent_idx = 0
        while True:
            lc_idx = parent_idx * 2 + 1
            rc_idx = lc_idx + 1
            if lc_idx >= len(self.tree):
                leaf_idx = parent_idx
                break
            else:
                if self.tree[lc_idx] >= v:
                    parent_idx = lc_idx
                else:
                    v -= self.tree[lc_idx]
                    parent_idx = rc_idx

        return leaf_idx, self.tree[leaf_idx], self.data[leaf_idx - self.capacity + 1]
    @property
    def total_p(self):
        return self.tree[0]


class Memory:
    epsilon = 0.0001
    alpha = 0.8
    beta = 0.3
    beta_increment_per_sampling = 0.0004
    abs_err_upper = 1

    def __init__(self, capacity):
        self.sum_tree = SumTree(capacity)

    def store(self, transition):
        max_p = np.max(self.sum_tree.tree[-self.sum_tree.capacity:])
        if max_p == 0:
            max_p = self.abs_err_upper
        self.sum_tree.add(max_p, transition)

    def sample(self, n):
        b_idx, b_memory, ISWeights = np.empty((n,), dtype=np.int32), np.empty((n, self.sum_tree.data[0].size), dtype=object), np.empty((n, 1))
        pri_seg = self.sum_tree.total_p / n
        self.beta = np.min([1, self.beta + self.beta_increment_per_sampling])
        leaves = self.sum_tree.tree[-self.sum_tree.capacity:]
        min_prob = np.min(leaves[leaves > 0]) / self.sum_tree.total_p
        for i in range(n):
            # intervals
            a, b = pri_seg * i, pri_seg * (i + 1)
            v = np.random.uniform(a, b)
            idx_, p, data = self.sum_tree.find_leaves(v)
            prob = p / self.sum_tree.total_p
            ISWeights[i, 0] = (prob / min_prob) ** -self.beta
            b_idx[i], b_memory[i, :] = idx_, data
        return b_idx, b_memory, ISWeights

    def batch_update(self, tree_idx, abs_errors):
        abs_errors += self.epsilon
        clipped_errors = np.minimum(abs_errors, self.abs_err_upper)
        ps = clipped_errors ** self.alpha
        for ti, p in zip(tree_idx, ps):
            self.sum_tree.update(ti, p)
